
.. _setup:

*****************************
Setup
*****************************

To use this extension, you need to:

* place the definition.py script somewhere
* edit the conf.py 

.. index::
   triple: find; definition.py; location
   pair: place; definition.py

Place definition.py
============================

If you downloaded `the documentation and code <https://work.ten3.org/ten3/attach/TEN3.Materials.Public/sde.zip>`_, you can unzip it and read this documentation on your system. You will find the definition.py in /build/_downloads/ folder. 

Otherwise you saved definition.py using the method under :ref:`download`. 

You now need to decide where you want to place the definition.py script on your system so that it is found you do a build. For example:

* in the same directory as the conf.py
* in a directory that you want to reference for multiple Sphinx projects
* with the Sphinx software or another location you know is already in system path

For this Sphinx site, we have placed definition in our code directory and have included it in the site so you can look at the code and comments. 


Edit conf.py
=======================

You need to make three changes to conf.py:

* set the path to definition.py
* add to extension list
* set include to true

.. index::
   : conf.py; path; extension

Set the path
--------------------

The default conf.py as of 2016 included a line ``# If extensions (or modules to document with autodoc) are in another directory,`` which is near the top of the script. It explains you should the path for the extension if it is not in a place it will be found. 

For example, we have the extension in the code folder of our documentation so we added the line::

   sys.path.insert(0,os.path.abspath('./code'))

Remember, the dot means the current folder. 

You can also give the full path in quotes, such as::

   sys.path.insert(0,"/home/user/sde/source/code")


.. index::
   : conf.py; list; extension

Extension list
--------------------

Search for ``extensions =`` and you'll find a list of extensions being used. Add definition to the end of the list.

::

   extensions = [
       'sphinx.ext.autodoc',
       'sphinx.ext.doctest',
       'sphinx.ext.intersphinx',
       'sphinx.ext.todo',
       'sphinx.ext.viewcode',
       'terminology',
   ]

You probably will not be using the same extensions as our example. The point is to add definition to the end of the list.

.. index::
   : conf.py; include; extension

Set include
--------------------

Search ``todo_inc``. Add these lines below that line::

   # If true, 'terminology' and 'terminologylist' produce output, else they produce nothing.
   terminology_include_terminologies = True





**********************
Optional changes
**********************

.. index:: 
   pair: hyperlink; change

.. _defHyperlink:

Definition list hyperlink
======================================

You can change the appearance of the hyperlink between the terms that are given via `.. definitionlist::`. In definition.py the ``process_definition_nodes()`` function has ``description`` string. You can change the string to how what you desire for the hyperlink that takes you back to where the term was defined. 


.. index::
   triple: word; count; term

.. _moreWords:

Changing number of words in the "term"
===========================================

The extension ships with the number of words in the term being a maximum of 15. You can change this by editing the extension, file definition.py. Find this line::

   optional_arguments = 14

Then change the 14 to the number you desire. Remember, the count starts at 0, hence setting to 14 gives you up to 15 words in the term.





